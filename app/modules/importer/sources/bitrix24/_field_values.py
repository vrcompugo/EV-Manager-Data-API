import json

from app.modules.settings.settings_services import get_settings

from ._connector import post, get


fields = {
    "SOURCE_ID": {
        "1": "DAA",
        "2": "WattFox",
        "3": "Senec",
        "11": "T-Leads",
        "4": "Hausfrage",
        "16": "aroundhome",
        "17": "BSH",
        "18": "AEV",
        "OTHER": "other",
    },
    "UF_CRM_1576169522": {
        "": "nicht ausgewählt",
        "1042": "0%",
        "1044": "bis 5%",
        "1046": "bis 8%",
        "1048": "bis 10%",
        "1050": "bis 15%",
        "1052": "bis 20%",
        "1054": "manuell",
        "1056": "Sondervereinbarung",
        "1876": "keine Auswahl"
    },
    "UF_CRM_5DF8B0188EF78": {
        "": "nicht ausgewählt",
        "1540": "0%",
        "1542": "bis 5%",
        "1544": "bis 8%",
        "1546": "bis 10%",
        "1548": "bis 15%",
        "1550": "bis 20%",
        "1552": "manuell",
        "1554": "Sondervereinbarung",
        "1874": "keine Auswahl"
    },
    "UF_CRM_1576184116": {
        "": "nicht ausgewählt",
        "1512": "Nachlass wie im CRM beschrieben eingehalten",
        "1514": "über Nachlass hinaus verkauft",
        "1516": "kein zus. Auftrag generiert",
        "1866": "keine Auswahl"
    },
    "UF_CRM_1576184383": {
        "": "nicht ausgewählt",
        "1518": "Wärmepumpe (ecoStar) verkauft",
        "1520": "keine ecoStar verkauft",
        "1856": "keine Auswahl"
    },
    "UF_CRM_5DF8B018DA5E6": {
        "": "nicht ausgewählt",
        "1562": "Wärmepumpe (ecoStar) verkauft",
        "1564": "keine ecoStar verkauft",
        "1854": "keine Auswahl"
    },
    "UF_CRM_1576184446": {
        "": "nicht ausgewählt",
        "1522": "Barzahler",
        "1524": "Dresdner Bank",
        "1846": "keine Auswahl"
    },
    "UF_CRM_5DF8B018E971A": {
        "": "nicht ausgewählt",
        "1566": "Barzahler",
        "1568": "Dresdner Bank",
        "1844": "keine Auswahl"
    },
    "UF_CRM_1587030744": {
        "": "nicht ausgewählt",
        "2208": "bis 3900 kWh",
        "2210": "bis 6000 kWh",
        "2212": "bis 8000 kWh",
        "2214": "über 8000 kWh",
    },
    "UF_CRM_1587030804": {
        "": "nicht ausgewählt",
        "2216": "bis 4 kWp",
        "2218": "bis 7 kWp",
        "2220": "bis 10 kWp",
        "2222": "über 10 kWp",
    }

}

t_lead_zip_codes = [
    "33014",
    "33034",
    "33093",
    "33094",
    "33095",
    "33096",
    "33098",
    "33100",
    "33102",
    "33104",
    "33106",
    "33129",
    "33142",
    "33154",
    "33165",
    "33178",
    "33181",
    "34105",
    "34106",
    "34108",
    "34109",
    "34110",
    "34111",
    "34112",
    "34113",
    "34114",
    "34115",
    "34117",
    "34119",
    "34121",
    "34123",
    "34125",
    "34127",
    "34128",
    "34130",
    "34131",
    "34132",
    "34134",
    "34194",
    "34195",
    "34196",
    "34197",
    "34198",
    "34209",
    "34212",
    "34219",
    "34225",
    "34233",
    "34246",
    "34253",
    "34260",
    "34265",
    "34266",
    "34270",
    "34277",
    "34281",
    "34286",
    "34289",
    "34292",
    "34295",
    "34298",
    "34302",
    "34305",
    "34308",
    "34311",
    "34314",
    "34317",
    "34320",
    "34323",
    "34326",
    "34327",
    "34329",
    "34346",
    "34355",
    "34359",
    "34369",
    "34376",
    "34379",
    "34385",
    "34388",
    "34393",
    "34396",
    "34399",
    "34414",
    "34431",
    "34434",
    "34439",
    "34454",
    "34466",
    "34471",
    "34474",
    "34477",
    "34479",
    "34494",
    "34495",
    "34497",
    "34508",
    "34513",
    "34516",
    "34519",
    "34535",
    "34537",
    "34549",
    "34560",
    "34576",
    "34582",
    "34587",
    "34590",
    "34593",
    "34596",
    "34599",
    "34611",
    "34613",
    "34621",
    "34626",
    "34628",
    "34630",
    "34632",
    "34633",
    "34637",
    "34639",
    "35031",
    "35032",
    "35034",
    "35035",
    "35036",
    "35037",
    "35039",
    "35041",
    "35043",
    "35066",
    "35083",
    "35085",
    "35088",
    "35091",
    "35094",
    "35099",
    "35104",
    "35107",
    "35108",
    "35110",
    "35114",
    "35116",
    "35117",
    "35119",
    "35216",
    "35232",
    "35236",
    "35239",
    "35260",
    "35274",
    "35279",
    "35282",
    "35285",
    "35287",
    "35288",
    "35315",
    "35329",
    "35402",
    "35410",
    "35415",
    "35423",
    "35428",
    "35508",
    "35509",
    "35510",
    "35516",
    "35519",
    "35647",
    "35708",
    "35745",
    "35753",
    "35759",
    "35767",
    "35781",
    "35792",
    "35794",
    "35799",
    "36179",
    "36199",
    "36205",
    "36211",
    "36219",
    "36251",
    "36275",
    "36280",
    "36286",
    "36287",
    "36304",
    "36320",
    "36326",
    "36329",
    "37073",
    "37075",
    "37077",
    "37079",
    "37081",
    "37083",
    "37085",
    "37095",
    "37096",
    "37097",
    "37098",
    "37099",
    "37100",
    "37120",
    "37124",
    "37127",
    "37130",
    "37133",
    "37139",
    "37170",
    "37176",
    "37181",
    "37186",
    "37194",
    "37213",
    "37214",
    "37215",
    "37216",
    "37217",
    "37218",
    "37235",
    "37242",
    "37247",
    "37249",
    "37269",
    "37276",
    "37284",
    "37287",
    "37290",
    "37297",
    "37318",
    "37586",
    "37671",
    "37688",
    "37691",
    "37696",
    "37697",
    "37699",
    "40110",
    "40180",
    "40181",
    "40182",
    "40183",
    "40188",
    "40189",
    "40190",
    "40191",
    "40192",
    "40193",
    "40194",
    "40195",
    "40196",
    "40198",
    "40199",
    "40200",
    "40202",
    "40204",
    "40206",
    "40208",
    "40210",
    "40211",
    "40212",
    "40213",
    "40215",
    "40217",
    "40219",
    "40221",
    "40223",
    "40225",
    "40227",
    "40229",
    "40231",
    "40233",
    "40235",
    "40237",
    "40239",
    "40250",
    "40251",
    "40252",
    "40256",
    "40257",
    "40260",
    "40300",
    "40463",
    "40464",
    "40465",
    "40467",
    "40468",
    "40470",
    "40472",
    "40474",
    "40476",
    "40477",
    "40479",
    "40489",
    "40541",
    "40543",
    "40545",
    "40547",
    "40549",
    "40589",
    "40591",
    "40593",
    "40595",
    "40597",
    "40599",
    "40625",
    "40627",
    "40629",
    "40667",
    "40668",
    "40670",
    "40699",
    "40718",
    "40721",
    "40723",
    "40724",
    "40764",
    "40786",
    "40789",
    "40822",
    "40842",
    "40873",
    "40878",
    "40880",
    "40882",
    "41199",
    "41236",
    "41238",
    "41352",
    "41363",
    "41451",
    "41452",
    "41453",
    "41456",
    "41457",
    "41460",
    "41462",
    "41464",
    "41466",
    "41468",
    "41469",
    "41470",
    "41472",
    "41513",
    "41515",
    "41516",
    "41517",
    "41538",
    "41539",
    "41540",
    "41541",
    "41542",
    "41561",
    "41564",
    "41569",
    "41812",
    "42653",
    "42655",
    "42657",
    "42659",
    "42697",
    "42699",
    "42719",
    "42781",
    "42799",
    "50123",
    "50124",
    "50126",
    "50127",
    "50129",
    "50169",
    "50170",
    "50171",
    "50181",
    "50189",
    "50226",
    "50259",
    "50350",
    "50351",
    "50354",
    "50411",
    "50413",
    "50414",
    "50415",
    "50416",
    "50417",
    "50418",
    "50419",
    "50420",
    "50421",
    "50422",
    "50425",
    "50426",
    "50569",
    "50574",
    "50575",
    "50576",
    "50579",
    "50580",
    "50581",
    "50582",
    "50583",
    "50585",
    "50586",
    "50587",
    "50588",
    "50589",
    "50590",
    "50591",
    "50592",
    "50593",
    "50594",
    "50595",
    "50596",
    "50598",
    "50599",
    "50600",
    "50602",
    "50603",
    "50604",
    "50605",
    "50606",
    "50607",
    "50656",
    "50657",
    "50658",
    "50661",
    "50662",
    "50663",
    "50664",
    "50667",
    "50668",
    "50670",
    "50672",
    "50674",
    "50676",
    "50677",
    "50678",
    "50679",
    "50725",
    "50726",
    "50727",
    "50728",
    "50729",
    "50730",
    "50733",
    "50735",
    "50737",
    "50739",
    "50760",
    "50763",
    "50765",
    "50767",
    "50769",
    "50819",
    "50820",
    "50823",
    "50825",
    "50827",
    "50829",
    "50855",
    "50858",
    "50859",
    "50919",
    "50922",
    "50923",
    "50924",
    "50925",
    "50926",
    "50927",
    "50928",
    "50931",
    "50933",
    "50935",
    "50937",
    "50939",
    "50960",
    "50962",
    "50963",
    "50964",
    "50965",
    "50966",
    "50968",
    "50969",
    "50996",
    "50997",
    "51057",
    "51058",
    "51059",
    "51060",
    "51061",
    "51063",
    "51065",
    "51067",
    "51069",
    "51100",
    "51101",
    "51103",
    "51105",
    "51107",
    "51139",
    "51140",
    "51141",
    "51167",
    "51169",
    "51170",
    "51171",
    "51172",
    "51173",
    "51174",
    "51175",
    "51178",
    "51181",
    "51222",
    "51366",
    "51367",
    "51368",
    "51369",
    "51370",
    "51371",
    "51373",
    "51375",
    "51377",
    "51379",
    "51381",
    "51424",
    "51425",
    "51461",
    "51462",
    "51463",
    "51467",
    "52445",
    "56206",
    "56235",
    "56237",
    "56242",
    "56244",
    "56249",
    "56269",
    "56271",
    "56276",
    "56316",
    "56379",
    "56407",
    "56409",
    "56410",
    "56412",
    "56414",
    "56422",
    "56424",
    "56427",
    "56428",
    "56456",
    "56457",
    "56459",
    "56462",
    "56469",
    "56470",
    "56472",
    "56476",
    "56477",
    "56479",
    "57271",
    "57290",
    "57299",
    "57319",
    "57334",
    "57339",
    "57368",
    "57392",
    "57399",
    "57413",
    "57439",
    "57518",
    "57520",
    "57562",
    "57567",
    "57578",
    "57580",
    "57583",
    "57586",
    "57610",
    "57612",
    "57614",
    "57626",
    "57627",
    "57629",
    "57639",
    "57642",
    "57644",
    "57645",
    "57647",
    "57648",
    "59494",
    "59505",
    "59519",
    "59552",
    "59553",
    "59555",
    "59556",
    "59557",
    "59558",
    "59578",
    "59579",
    "59581",
    "59590",
    "59597",
    "59602",
    "59609",
    "59755",
    "59757",
    "59759",
    "59816",
    "59817",
    "59818",
    "59821",
    "59823",
    "59844",
    "59846",
    "59868",
    "59870",
    "59872",
    "59889",
    "59909",
    "59929",
    "59939",
    "59955",
    "59964",
    "59969",
    "60060",
    "60185",
    "60216",
    "60222",
    "60223",
    "60252",
    "60254",
    "60255",
    "60256",
    "60257",
    "60258",
    "60259",
    "60260",
    "60261",
    "60262",
    "60263",
    "60264",
    "60265",
    "60267",
    "60268",
    "60270",
    "60272",
    "60273",
    "60274",
    "60275",
    "60276",
    "60277",
    "60278",
    "60279",
    "60280",
    "60283",
    "60284",
    "60285",
    "60286",
    "60288",
    "60289",
    "60290",
    "60291",
    "60294",
    "60295",
    "60296",
    "60297",
    "60298",
    "60300",
    "60301",
    "60302",
    "60303",
    "60304",
    "60305",
    "60306",
    "60307",
    "60308",
    "60309",
    "60310",
    "60311",
    "60313",
    "60314",
    "60316",
    "60318",
    "60320",
    "60322",
    "60323",
    "60325",
    "60326",
    "60327",
    "60329",
    "60377",
    "60379",
    "60380",
    "60382",
    "60385",
    "60386",
    "60388",
    "60389",
    "60422",
    "60423",
    "60424",
    "60428",
    "60429",
    "60431",
    "60433",
    "60435",
    "60437",
    "60438",
    "60439",
    "60482",
    "60483",
    "60484",
    "60485",
    "60486",
    "60487",
    "60488",
    "60489",
    "60528",
    "60549",
    "60594",
    "60596",
    "60598",
    "60599",
    "60600",
    "60607",
    "60608",
    "60609",
    "60610",
    "60611",
    "60612",
    "60613",
    "60614",
    "60615",
    "60616",
    "60617",
    "60619",
    "60620",
    "60621",
    "60622",
    "60623",
    "60624",
    "60625",
    "60626",
    "60627",
    "60628",
    "60629",
    "60630",
    "60631",
    "60632",
    "60633",
    "60634",
    "60635",
    "60636",
    "60637",
    "60638",
    "60639",
    "60641",
    "60643",
    "60644",
    "60645",
    "60646",
    "60647",
    "60648",
    "60651",
    "60652",
    "60653",
    "60699",
    "61111",
    "61116",
    "61118",
    "61130",
    "61137",
    "61138",
    "61167",
    "61169",
    "61182",
    "61184",
    "61191",
    "61194",
    "61197",
    "61200",
    "61203",
    "61206",
    "61209",
    "61229",
    "61231",
    "61239",
    "61250",
    "61267",
    "61273",
    "61279",
    "61300",
    "61341",
    "61342",
    "61343",
    "61345",
    "61346",
    "61348",
    "61350",
    "61352",
    "61378",
    "61379",
    "61381",
    "61389",
    "61434",
    "61435",
    "61436",
    "61437",
    "61440",
    "61449",
    "61462",
    "61474",
    "61476",
    "63057",
    "63059",
    "63060",
    "63061",
    "63062",
    "63063",
    "63064",
    "63065",
    "63067",
    "63069",
    "63071",
    "63073",
    "63075",
    "63150",
    "63165",
    "63179",
    "63263",
    "63438",
    "63441",
    "63442",
    "63443",
    "63444",
    "63446",
    "63447",
    "63450",
    "63452",
    "63454",
    "63456",
    "63457",
    "63475",
    "63477",
    "63486",
    "63505",
    "63526",
    "63543",
    "63546",
    "63549",
    "63654",
    "63667",
    "63674",
    "63683",
    "63691",
    "63694",
    "63695",
    "65546",
    "65547",
    "65549",
    "65550",
    "65551",
    "65552",
    "65553",
    "65554",
    "65555",
    "65556",
    "65558",
    "65580",
    "65582",
    "65589",
    "65594",
    "65599",
    "65604",
    "65614",
    "65620",
    "65624",
    "65626",
    "65627",
    "65754",
    "65755",
    "65756",
    "65757",
    "65758",
    "65760",
    "65810",
    "65812",
    "65823",
    "65824",
    "65840",
    "65842",
    "65843",
    "65844",
    "65925",
    "65926",
    "65927",
    "65936"
]


def convert_field_value_from_remote(field, data):
    if field == "SOURCE_ID":
        print(data[field])
    if field in fields and data[field] in fields[field]:
        return fields[field][data[field]]
    return None


def convert_field_value_to_remote(field, data):
    config = get_settings("external/bitrix24")
    if field in config["select_lists"]:
        inv_map = {v: k for k, v in config["select_lists"][field].items()}
        if data[field] in inv_map:
            return inv_map[data[field]]
    if field in fields:
        inv_map = {v: k for k, v in fields[field].items()}
        if data[field] in inv_map:
            return inv_map[data[field]]
    return None


def convert_field_euro_from_remote(field, data):
    if data[field] is None or data[field] == "":
        return 0
    value = str(data[field])
    if value.find("|") < 0:
        print("wrong format error: ", value)
        return 0
    return float(value[:value.find("|")])


def convert_data_to_post_data(data, data_type):
    config = get_settings("external/bitrix24")
    post_data = {}
    for field in data.keys():
        online_field = field.upper()
        if field.lower() in config[data_type]["fields"]:
            online_field = config[data_type]["fields"][field.lower()]
        if type(data[field]) is bool:
            post_data[f"fields[{online_field}]"] = int(data[field])
        else:
            if type(data[field]) is list:
                for i in range(len(data[field])):
                    if type(data[field][i]) is dict:
                        for field2 in data[field][i].keys():
                            if type(data[field][i][field2]) is list:
                                for i2 in range(len(data[field][i][field2])):
                                    post_data[f"fields[{online_field}][{i}][{field2}][{i2}]"] = data[field][i][field2][i2]
                            else:
                                post_data[f"fields[{online_field}][{i}][{field2}]"] = data[field][i][field2]
                    else:
                        post_data[f"fields[{online_field}][{i}]"] = data[field][i]
            elif type(data[field]) is dict:
                for key in data[field].keys():
                    if type(data[field][key]) is list:
                        for i in range(len(data[field][key])):
                            post_data[f"fields[{online_field}][{key}][{i}]"] = convert_list_value(field, data[field][key][i], config)
                    else:
                        post_data[f"fields[{online_field}][{key}]"] = convert_list_value(field, data[field][key], config)
            else:
                post_data[f"fields[{online_field}]"] = convert_list_value(field, data[field], config)
    if data_type == "deal":
        if "fields[ID]" in post_data:
            post_data["id"] = post_data["fields[ID]"]
    return post_data


def convert_list_value(field, value, config=None):
    if config is None:
        config = get_settings("external/bitrix24")
    if field.lower() in config["select_lists"]:
        inv_map = {v: k for k, v in config["select_lists"][field.lower()].items()}
        if value in inv_map:
            return inv_map[value]
    return value
